import fs from 'fs-extra'

export async function getCloudCookie(url: string, password: string): Promise<any> {
    const payload = JSON.stringify({ password })
    const response = await fetch(url, {
        method: 'POST',
        headers: {
            'Content-Type': 'application/json',
        },
        body: payload,
    })
    return response.json()
}

interface Cookie {
    domain: string
    expirationDate: number
    hostOnly: boolean
    httpOnly: boolean
    name: string
    path: string
    sameSite: string
    secure: boolean
    session: boolean
    storeId: string
    value: string
}

function serializeCookie(cookie: Cookie): string {
    // return `${encodeCookie(cookie.name)}=${encodeCookie(cookie.value)}`
    const { domain, hostOnly, path, secure, expirationDate, name, value } = cookie
    return [domain, !hostOnly, path, secure, Math.floor(expirationDate) || 0, name, value].map((e) => {
        if (typeof e === 'boolean') {
            return String(e).toUpperCase()
        }
        return String(e)
    }).join('\t')
}

/**
 * 从 CookieCloud 获取 cookie 并写入到文件
 *
 * @author CaoMeiYouRen
 * @date 2024-08-27
 * @export
 * @param data
 */
export async function cloudCookie2File(data: any) {
    try {
        for (const [key, cookies] of Object.entries(data.cookie_data)) {
            let cookieFileContent = '# Netscape HTTP Cookie File\n'
            cookieFileContent += '# http://curl.haxx.se/rfc/cookie_spec.html\n'
            cookieFileContent += '# This file was generated by CaoMeiYouRen/rss-resources-download\n'
            // const cookies = data.cookie_data[value]
            for (const cookie of (cookies as any)) {
                cookieFileContent += `${serializeCookie(cookie)}\n`
            }
            if (!await fs.pathExists('cookies')) {
                await fs.mkdir('cookies')
            }
            await fs.writeFile(`cookies/${key}.txt`, cookieFileContent, 'utf-8')
        }

    } catch (error) {
        console.error('Unexpected error:', error)
    }
}
